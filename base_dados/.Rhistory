matriz <- matrix(1,5,10,30,15,8),nrow=3,ncol=2,byrow=TRUE
matriz <- matrix(c(1,5,10,30,15,8)),nrow=3,ncol=2,byrow=TRUE
matriz <- matrix(c(1,5,10,30,15,8),nrow=3,ncol=2,byrow=TRUE)
print(matriz)
matriz <- matrix(c(1,5,10,30,15,8),nrow=3,ncol=2,byrow=false)
matriz <- matrix(c(1,5,10,30,15,8),nrow=3,ncol=2,byrow=FALSE)
print(matriz)
vetorA <- c(2,5,8)
vetorB <- c(3,6,9)
matriz2<- rbind(vetorA,vetorB)
matriz2
mes_numero <- c(1:12)
mes_numero
mes-nome <- c('janeiro','fevereiro','março','abril','maio','junho','julho'
'agosto','setembro','outubro','novembro','dezembro')
mes_nome <- c('janeiro','fevereiro','março','abril','maio','junho','julho'
'agosto','setembro','outubro','novembro','dezembro')
mes_nome
mes_nome <- c('janeiro','fevereiro','março','abril','maio','junho','julho'
'agosto','setembro','outubro','novembro','dezembro')
mes_nome <- c('janeiro','fevereiro','março','abril','maio','junho','julho',
'agosto','setembro','outubro','novembro','dezembro')
mes_nome
ano <- c(rep(2021,12))
ano
data.frame(mes_numero,mes_nome,ano)
data_frame <- data.frame(mes_numero,mes_nome,ano)
View(data_frame)
View(data_frame)
install.packages("argo")
library(argo)
?argo
install.packages("readxl")
for (i in 1:10) {
print(i)
}
for(numero in lista){
mult=numero*2
print(mult)
}
lista <- c(1,2,3,4,10)
for(numero in lista){
mult=numero*2
print(mult)
}
covid_sp_tratado <- read.csv("D:/Mestrado/Linguagem_R-Projeto_1/Dados_covid/dados-covid-sp-master/data/covid_sp_tratado.csv", header=FALSE)
View(covid_sp_tratado)
ponto_intersecao <- function(P1, P2, P3, P4) {
# calcula as inclinações das retas
m1 <- (P2[2] - P1[2]) / (P2[1] - P1[1])
m2 <- (P4[2] - P3[2]) / (P4[1] - P3[1])
# calcula as constantes de inclinação das retas
b1 <- P1[2] - m1 * P1[1]
b2 <- P3[2] - m2 * P3[1]
# calcula o ponto de interseção
xi <- (b2 - b1) / (m1 - m2)
yi <- m1 * xi + b1
return(c(xi, yi))
}
ponto_intersecao(c(1, 2), c(3, 4), c(2, 1), c(4, 3))
ponto_intersecao(c(1, 2), c(3, 4), c(2, 1), c(4, 3))
ponto_intersecao(c(0, 2), c(3, 4), c(2, 1), c(4, 3))
ponto_intersecao <- function(P1, P2, P3, P4) {
# calcula as inclinações das retas
m1 <- (P2[2] - P1[2]) / (P2[1] - P1[1])
m2 <- (P4[2] - P3[2]) / (P4[1] - P3[1])
# calcula as constantes de inclinação das retas
b1 <- P1[2] - m1 * P1[1]
b2 <- P3[2] - m2 * P3[1]
# calcula o ponto de interseção
xi <- (b2 - b1) / (m1 - m2)
yi <- m1 * xi + b1
return(c(xi, yi))
}
ponto_intersecao(c(0, 2), c(3, 4), c(2, 1), c(4, 3))
# Definindo as coordenadas dos pontos
P1 <- c(1, 2)
P2 <- c(3, 4)
P3 <- c(2, 1)
P4 <- c(4, 3)
# Calculando o ponto de interseção
pi <- ponto_intersecao(P1, P2, P3, P4)
# Plotando as retas e o ponto de interseção
plot(c(0, 5), c(0, 5), type="n", xlab="X", ylab="Y")
abline(a=b1, b=m1, col="red")
P2
ponto_intersecao <- function(P1, P2, P3, P4) {
# calcula as inclinações das retas
m1 <- (P2[2] - P1[2]) / (P2[1] - P1[1])
m2 <- (P4[2] - P3[2]) / (P4[1] - P3[1])
# calcula as constantes de inclinação das retas
b1 <- P1[2] - m1 * P1[1]
b2 <- P3[2] - m2 * P3[1]
# calcula o ponto de interseção
xi <- (b2 - b1) / (m1 - m2)
yi <- m1 * xi + b1
return(c(xi, yi))
}
ponto_intersecao(c(0, 2), c(3, 4), c(2, 1), c(4, 3))
# Definindo as coordenadas dos pontos
P1
P2
P3
P4
# Calculando o ponto de interseção
pi <- ponto_intersecao(P1, P2, P3, P4)
# Plotando as retas e o ponto de interseção
plot(c(0, 5), c(0, 5), type="n", xlab="X", ylab="Y")
abline(a=b1, b=m1, col="red")
# Calculando o ponto de interseção
pi <- ponto_intersecao(P1, P2, P3, P4)
ponto_intersecao <- function(P1, P2, P3, P4) {
# calcula as inclinações das retas
m1 <- (P2[2] - P1[2]) / (P2[1] - P1[1])
m2 <- (P4[2] - P3[2]) / (P4[1] - P3[1])
# calcula as constantes de inclinação das retas
b1 <- P1[2] - m1 * P1[1]
b2 <- P3[2] - m2 * P3[1]
# calcula o ponto de interseção
xi <- (b2 - b1) / (m1 - m2)
yi <- m1 * xi + b1
return(c(xi, yi))
}
ponto_intersecao(c(0, 2), c(3, 4), c(2, 1), c(4, 3))
# Calculando o ponto de interseção
pi <- ponto_intersecao(P1, P2, P3, P4)
# Plotando as retas e o ponto de interseção
plot(c(0, 5), c(0, 5), type="n", xlab="X", ylab="Y")
abline(a=b1, b=m1, col="red")
# Define as coordenadas dos pontos
P1 <- c(1, 2)
P2 <- c(3, 4)
P3 <- c(2, 1)
P4 <- c(4, 3)
# Calcula as inclinações das retas
m1 <- (P2[2] - P1[2]) / (P2[1] - P1[1])
m2 <- (P4[2] - P3[2]) / (P4[1] - P3[1])
# Calcula as constantes de inclinação das retas
b1 <- P1[2] - m1 * P1[1]
b2 <- P3[2] - m2 * P3[1]
# Calcula o ponto de interseção
xi <- (b2 - b1) / (m1 - m2)
yi <- m1 * xi + b1
pi <- c(xi, yi)
# Plota as retas e o ponto de interseção
plot(c(0, 5), c(0, 5), type="n", xlab="X", ylab="Y")
abline(a=b1, b=m1, col="red")
abline(a=b2, b=m2, col="blue")
points(pi[1], pi[2], pch=16, col="green")
# Define as coordenadas dos pontos
P1 <- c(1, 2)
P2 <- c(9, 4)
P3 <- c(2, 1)
P4 <- c(4, 3)
# Calcula as inclinações das retas
m1 <- (P2[2] - P1[2]) / (P2[1] - P1[1])
m2 <- (P4[2] - P3[2]) / (P4[1] - P3[1])
# Calcula as constantes de inclinação das retas
b1 <- P1[2] - m1 * P1[1]
b2 <- P3[2] - m2 * P3[1]
# Calcula o ponto de interseção
xi <- (b2 - b1) / (m1 - m2)
yi <- m1 * xi + b1
pi <- c(xi, yi)
# Plota as retas e o ponto de interseção
plot(c(0, 5), c(0, 5), type="n", xlab="X", ylab="Y")
abline(a=b1, b=m1, col="red")
abline(a=b2, b=m2, col="blue")
points(pi[1], pi[2], pch=16, col="green")
# Define as coordenadas dos pontos
P1 <- c(1, 1)
P2 <- c(2, 2)
P3 <- c(-1, -1)
P4 <- c(-2, -2)
# Calcula as inclinações das retas
m1 <- (P2[2] - P1[2]) / (P2[1] - P1[1])
m2 <- (P4[2] - P3[2]) / (P4[1] - P3[1])
# Calcula as constantes de inclinação das retas
b1 <- P1[2] - m1 * P1[1]
b2 <- P3[2] - m2 * P3[1]
# Calcula o ponto de interseção
xi <- (b2 - b1) / (m1 - m2)
yi <- m1 * xi + b1
pi <- c(xi, yi)
# Plota as retas e o ponto de interseção
plot(c(0, 5), c(0, 5), type="n", xlab="X", ylab="Y")
abline(a=b1, b=m1, col="red")
abline(a=b2, b=m2, col="blue")
points(pi[1], pi[2], pch=16, col="green")
P3 <- c(0, 5)
# Define as coordenadas dos pontos
P1 <- c(1, 1)
P2 <- c(2, 2)
P3 <- c(0, 5)
P4 <- c(-2, -2)
# Calcula as inclinações das retas
m1 <- (P2[2] - P1[2]) / (P2[1] - P1[1])
m2 <- (P4[2] - P3[2]) / (P4[1] - P3[1])
# Calcula as constantes de inclinação das retas
b1 <- P1[2] - m1 * P1[1]
b2 <- P3[2] - m2 * P3[1]
# Calcula o ponto de interseção
xi <- (b2 - b1) / (m1 - m2)
yi <- m1 * xi + b1
pi <- c(xi, yi)
# Plota as retas e o ponto de interseção
plot(c(0, 5), c(0, 5), type="n", xlab="X", ylab="Y")
abline(a=b1, b=m1, col="red")
abline(a=b2, b=m2, col="blue")
points(pi[1], pi[2], pch=16, col="green")
P4 <- c(2, 2)
# Define as coordenadas dos pontos
P1 <- c(1, 1)
P2 <- c(2, 2)
P3 <- c(0, 5)
P4 <- c(2, 2)
# Calcula as inclinações das retas
m1 <- (P2[2] - P1[2]) / (P2[1] - P1[1])
m2 <- (P4[2] - P3[2]) / (P4[1] - P3[1])
# Calcula as constantes de inclinação das retas
b1 <- P1[2] - m1 * P1[1]
b2 <- P3[2] - m2 * P3[1]
# Calcula o ponto de interseção
xi <- (b2 - b1) / (m1 - m2)
yi <- m1 * xi + b1
pi <- c(xi, yi)
# Plota as retas e o ponto de interseção
plot(c(0, 5), c(0, 5), type="n", xlab="X", ylab="Y")
abline(a=b1, b=m1, col="red")
abline(a=b2, b=m2, col="blue")
points(pi[1], pi[2], pch=16, col="green")
points(pi[1], pi[2], pch=16, col="green")
P4 <- c(4, 3)
pi <- c(xi, yi)
# Calcula as constantes de inclinação das retas
b1 <- P1[2] - m1 * P1[1]
b2 <- P3[2] - m2 * P3[1]
install.packages("knitr")
---
title: "GGPLOT2"
---
title: "GGPLOT2"
# Cabeçalho 1
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
knitr::opts_chunk$set(echo = TRUE)
---
title: "Untitled"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
Teste
knitr::opts_chunk$set(echo = TRUE)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
Teste
install.packages("extraDistr")
library(extraDistr)
calcular_poder <- function(theta) {
n <- 10
k <- 6
p_valor <- 1 - pbinom(k-1, n, theta)
return(p_valor)
}
theta <- 1/2 + 0.01  # Escolha um valor específico para theta maior que 1/2
poder_amostral <- calcular_poder(theta)
cat("A função poder para theta =", theta, "é aproximadamente", poder_amostral, "\n")
library(extraDistr)
calcular_poder <- function(theta) {
n <- 10
k <- 8
p_valor <- 1 - pbinom(k-1, n, theta)
return(p_valor)
}
theta <- 1/2 + 0.01  # Escolha um valor específico para theta maior que 1/2
poder_amostral <- calcular_poder(theta)
cat("A função poder para theta =", theta, "é aproximadamente", poder_amostral, "\n")
setwd("D:\\Mestrado\\1Sem_23\\Ferramentas computacionais\\projeto_final\\base_dados")
dados_covid_sp <- read.csv("dados_covid_sp.csv")
dados_covid_sp <- read.csv("dados_covid_sp.csv", sep = ";")
dados_covid_sp <- read.csv('dados_covid_sp.csv', sep = ";")
View(dados_covid_sp)
base_sp <- read.csv('sp.csv', sep = ";")
raca_obitos <- read.csv('casos_obitos_raca_cor.csv', sep = ";")
View(raca_obitos)
dados_covid_sp <- read.csv('dados_covid_sp.csv', sep = ";")
base_sp <- read.csv('sp.csv', sep = ";")
View(dados_covid_sp)
View(dados_covid_sp)
# Analise 1: total de casos confirmados acumulados por cidade
glimpse(dados_covid_sp)
# carregando pacotes
library(dplyr)
library(rstatix)
library(ggplot2)
# Analise 1: total de casos confirmados acumulados por cidade
glimpse(dados_covid_sp)
dados_covid_sp$datahora <- as.Date(dados_covid_sp$datahora, format = '%Y/%m/%d')#convertendo datahora para data
glimpse(dados_covid_sp)
dados_covid_sp <- read.csv('dados_covid_sp.csv', sep = ";")
# Tratamento da base de dados
glimpse(dados_covid_sp)
dados_covid_sp$datahora <- as.Date(dados_covid_sp$datahora, format = '%Y-%m-%d')#convertendo datahora para data
glimpse(dados_covid_sp)
View(dados_covid_sp)
#ecluindo colunas que não iremos usar
dados_covid_sp_tratado <- select(dados_covid_sp, -c(2))
View(dados_covid_sp_tratado)
View(dados_covid_sp)
#ecluindo colunas que não iremos usar
dados_covid_sp_tratado <- select(dados_covid_sp, -c(2,6,9))
View(dados_covid_sp)
# verificando valores vazios
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.na(x))) # valores NA
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.nan(x))) # valores NAN
View(dados_covid_sp_tratado)
# Total de casos por mes/ano
dados_covid_sp_tratado$ano_mes <- format(dados_covid_sp_tratado$datahora, "%Y-%m")
# Total de casos por ano/mes
dados_covid_sp_tratado$ano_mes <- format(dados_covid_sp_tratado$datahora, "%Y-%m")
casos_totais_mes_ano <- aggregate(casos ~ ano_mes, data = dados_covid_sp_tratado, FUN = sum)
View(casos_totais_mes_ano)
casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(ano_mes) %>%
summarise(total_casos = sum(casos))
View(casos_mes_ano)
View(casos_totais_mes_ano)
View(casos_totais_mes_ano)
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.nan(x))) # valores NAN
base_sp <- read.csv('sp.csv', sep = ";")
# Tratamento da base de dados
glimpse(dados_covid_sp)
dados_covid_sp$datahora <- as.Date(dados_covid_sp$datahora,
format = '%Y-%m-%d') #convertendo datahora para data
glimpse(dados_covid_sp)
# excluindo colunas que não iremos usar
dados_covid_sp_tratado <- select(dados_covid_sp, -c(2,6,9))
# verificando valores vazios
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.na(x))) # valores NA
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.nan(x))) # valores NAN
# Total de casos por ano/mes
dados_covid_sp_tratado$ano_mes <- format(dados_covid_sp_tratado$datahora, "%Y-%m")
casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(ano_mes) %>%
summarise(total_casos = sum(casos))
dados_covid_sp <- read.csv('dados_covid_sp.csv', sep = ";")
base_sp <- read.csv('sp.csv', sep = ";")
# Tratamento da base de dados
glimpse(dados_covid_sp)
dados_covid_sp$datahora <- as.Date(dados_covid_sp$datahora,
format = '%Y-%m-%d') #convertendo datahora para data
dados_covid_sp$datahora <- as.Date(dados_covid_sp$datahora,
format = '%Y-%m-%d') #convertendo datahora para data
glimpse(dados_covid_sp)
# excluindo colunas que não iremos usar
dados_covid_sp_tratado <- select(dados_covid_sp, -c(2,6,9))
# verificando valores vazios
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.na(x))) # valores NA
dados_covid_sp_tratado %>%
sapply(function(x) sum(is.nan(x))) # valores NAN
# Total de casos por ano/mes
dados_covid_sp_tratado$ano_mes <- format(dados_covid_sp_tratado$datahora, "%Y-%m")
casos_mes_ano <- dados_covid_sp_tratado %>%
group_by(ano_mes) %>%
summarise(total_casos = sum(casos))
View(casos_mes_ano)
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_line() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) %>%
geom_line() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_line() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_pont() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_point() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_density() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# plot do gráfico
ggplot2(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_density() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")
library(ggplot2)
# plot do gráfico
ggplot2(casos_mes_ano, aes(x = total_casos)) +
geom_density() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# plot do gráfico
ggplot(casos_mes_ano, aes(x = total_casos)) +
geom_density() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_density() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_bar() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_point() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_point() +
labs(x = "Mês/ano", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_point() +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
geom_line()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_point() +
geom_density()+
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_point() +
geom_line()+
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_point() +
geom_line() +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_point() +
geom_line() +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
casos_mes_ano <- casos_mes_ano[order(casos_mes_ano$ano_mes), ]
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_point() +
geom_line() +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_point() +
geom_line() +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot do gráfico
ggplot(casos_mes_ano, aes(x = ano_mes, y = total_casos)) +
geom_point() +
geom_path() +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot do gráfico
casos_mes_ano %>%
ggplot(aes(x = ano_mes, y = total_casos)) +
geom_point() +
geom_path() +
labs(x = "Ano/mês", y = "Total de casos", title = "Total de casos no estado de São Paulo")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
